syntax = "proto3";

package lemon_pi.shared.generated;

// common fields ...
// ALL messages should include:
//   seq_num
//   timestamp
//   sender
//
// These will be auto-populated on send

message GpsPosition {
  float lat = 1;
  float long = 2;
  int32 speed_mph = 3;
  int32 heading = 4;
  int64 gps_timestamp = 5;
}

// a ping message, sent sporadically from both car and pit
message Ping {

  int32 seq_num = 1;

  int32 timestamp = 2;

  string sender = 3;

  // optionally include a gpd position in these messages
  GpsPosition gps = 4;

}

// a text message from the pits to the driver
message DriverMessage {

  int32 seq_num = 1;

  int32 timestamp = 2;

  string sender = 3;

  string text = 4;

  string car_number = 5;

}

enum RaceFlagStatus {
  UNKNOWN = 0;
  GREEN = 1;
  YELLOW = 2;
  RED = 3;
  BLACK = 4;
  FINISH = 5;
}

// the race status. Only sent when it changes

message RaceStatus {

  int32 seq_num = 1;

  int32 timestamp = 2;

  string sender = 3;

  RaceFlagStatus flag_status = 4;
}

// this message doesn't have the key fields because it's an embedded part of
// other messages
message Opponent {
  string car_number = 1;

  string gap_text = 2;

  // we set this to true if we are chasing the car in front
  bool chase_mode = 3;
}

// the position of a car in the race. Usually only sent to our car
message RacePosition {
  int32 seq_num = 1;

  int32 timestamp = 2;

  string sender = 3;

  string car_number = 4;

  int32 position = 5;

  int32 lap_count = 6;

  Opponent car_ahead = 7;

  // in order to prevent missed flag transmissions from polluting the
  // display forever, we send the race status in each RacePosition update
  RaceFlagStatus flag_status = 8;

  // position in the class of car. Zero if there are no classes
  int32 position_in_class = 9;

}

message CarTelemetry {
  int32 seq_num = 1;

  int32 timestamp = 2;

  string sender = 3;

  int32 coolant_temp = 4;

  int32 lap_count = 5;

  // last lap time is in seconds and fractions of seconds
  float last_lap_time = 6;

  int32 last_lap_fuel_usage = 7;

  int32 fuel_remaining_percent = 8;

  // a list of recently seen + acknowledged messages by the driver
  repeated string messages_seen = 9;
}

message EnteringPits {

  int32 seq_num = 1;

  int32 timestamp = 2;

  string sender = 3;

}

message SetFuelLevel {
  int32 seq_num = 1;

  int32 timestamp = 2;

  string sender = 3;

  int32 percent_full = 4;

  string car_number = 5;
}

message RemoteReboot {
  int32 seq_num = 1;

  int32 timestamp = 2;

  string sender = 3;

  string car_number = 4;
}

message ToCarMessage {
  oneof to_car {
    Ping ping = 1;
    DriverMessage message = 2;
    RaceStatus race_status = 3;
    RacePosition race_position = 4;
    SetFuelLevel set_fuel = 5;
    RemoteReboot reboot = 6;
  }
}

message ToPitMessage {
  oneof to_pit {
    Ping ping = 1;
    CarTelemetry telemetry = 2;
    EnteringPits pitting = 3;
  }
}
